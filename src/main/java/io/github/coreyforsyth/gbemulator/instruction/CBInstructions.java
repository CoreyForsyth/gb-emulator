package io.github.coreyforsyth.gbemulator.instruction;

import io.github.coreyforsyth.gbemulator.CPU;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class CBInstructions
{
    public static Instruction[] instructions;
    private static final Instruction nop = cpu -> {};

    static  {
        instructions = new Instruction[0x100];
        instructions[0x00] = new RLC(CPU::getB, CPU::setB);
        instructions[0x01] = new RLC(CPU::getC, CPU::setC);
        instructions[0x02] = new RLC(CPU::getD, CPU::setD);
        instructions[0x03] = new RLC(CPU::getE, CPU::setE);
        instructions[0x04] = new RLC(CPU::getH, CPU::setH);
        instructions[0x05] = new RLC(CPU::getL, CPU::setL);
        instructions[0x06] = new RLC(cpu -> cpu.readByte(cpu.getHL()), (cpu, value) -> cpu.writeByte(cpu.getHL(), value));
        instructions[0x07] = new RLC(CPU::getA, CPU::setA);
        instructions[0x08] = new RRC(CPU::getB, CPU::setB);
        instructions[0x09] = new RRC(CPU::getC, CPU::setC);
        instructions[0x0A] = new RRC(CPU::getD, CPU::setD);
        instructions[0x0B] = new RRC(CPU::getE, CPU::setE);
        instructions[0x0C] = new RRC(CPU::getH, CPU::setH);
        instructions[0x0D] = new RRC(CPU::getL, CPU::setL);
        instructions[0x0E] = new RRC(cpu -> cpu.readByte(cpu.getHL()), (cpu, value) -> cpu.writeByte(cpu.getHL(), value));
        instructions[0x0F] = new RRC(CPU::getA, CPU::setA);
        instructions[0x10] = nop;
        instructions[0x11] = nop;
        instructions[0x12] = nop;
        instructions[0x13] = nop;
        instructions[0x14] = nop;
        instructions[0x15] = nop;
        instructions[0x16] = nop;
        instructions[0x17] = nop;
        instructions[0x18] = nop;
        instructions[0x19] = nop;
        instructions[0x1A] = nop;
        instructions[0x1B] = nop;
        instructions[0x1C] = nop;
        instructions[0x1D] = nop;
        instructions[0x1E] = nop;
        instructions[0x1F] = nop;
        instructions[0x20] = nop;
        instructions[0x21] = nop;
        instructions[0x22] = nop;
        instructions[0x23] = nop;
        instructions[0x24] = nop;
        instructions[0x25] = nop;
        instructions[0x26] = nop;
        instructions[0x27] = nop;
        instructions[0x28] = nop;
        instructions[0x29] = nop;
        instructions[0x2A] = nop;
        instructions[0x2B] = nop;
        instructions[0x2C] = nop;
        instructions[0x2D] = nop;
        instructions[0x2E] = nop;
        instructions[0x2F] = nop;
        instructions[0x30] = new SwapInstruction(CPU::getB, CPU::setB);
        instructions[0x31] = new SwapInstruction(CPU::getC, CPU::setC);
        instructions[0x32] = new SwapInstruction(CPU::getD, CPU::setD);
        instructions[0x33] = new SwapInstruction(CPU::getE, CPU::setE);
        instructions[0x34] = new SwapInstruction(CPU::getH, CPU::setH);
        instructions[0x35] = new SwapInstruction(CPU::getL, CPU::setL);
        instructions[0x36] = new SwapInstruction(cpu -> cpu.readByte(cpu.getHL()), (cpu, value) -> cpu.writeByte(cpu.getHL(), value));
        instructions[0x37] = new SwapInstruction(CPU::getA, CPU::setA);
        instructions[0x38] = nop;
        instructions[0x39] = nop;
        instructions[0x3A] = nop;
        instructions[0x3B] = nop;
        instructions[0x3C] = nop;
        instructions[0x3D] = nop;
        instructions[0x3E] = nop;
        instructions[0x3F] = nop;

        instructions[0x40] = new TestBit(0, CPU::getB);
        instructions[0x41] = new TestBit(0, CPU::getC);
        instructions[0x42] = new TestBit(0, CPU::getD);
        instructions[0x43] = new TestBit(0, CPU::getE);
        instructions[0x44] = new TestBit(0, CPU::getH);
        instructions[0x45] = new TestBit(0, CPU::getL);
        instructions[0x46] = new TestBit(0, cpu -> cpu.readByte(cpu.getHL()));
        instructions[0x47] = new TestBit(0, CPU::getA);
        instructions[0x48] = new TestBit(1, CPU::getB);
        instructions[0x49] = new TestBit(1, CPU::getC);
        instructions[0x4A] = new TestBit(1, CPU::getD);
        instructions[0x4B] = new TestBit(1, CPU::getE);
        instructions[0x4C] = new TestBit(1, CPU::getH);
        instructions[0x4D] = new TestBit(1, CPU::getL);
        instructions[0x4E] = new TestBit(1, cpu -> cpu.readByte(cpu.getHL()));
        instructions[0x4F] = new TestBit(1, CPU::getA);
        instructions[0x50] = new TestBit(2, CPU::getB);
        instructions[0x51] = new TestBit(2, CPU::getC);
        instructions[0x52] = new TestBit(2, CPU::getD);
        instructions[0x53] = new TestBit(2, CPU::getE);
        instructions[0x54] = new TestBit(2, CPU::getH);
        instructions[0x55] = new TestBit(2, CPU::getL);
        instructions[0x56] = new TestBit(2, cpu -> cpu.readByte(cpu.getHL()));
        instructions[0x57] = new TestBit(2, CPU::getA);
        instructions[0x58] = new TestBit(3, CPU::getB);
        instructions[0x59] = new TestBit(3, CPU::getC);
        instructions[0x5A] = new TestBit(3, CPU::getD);
        instructions[0x5B] = new TestBit(3, CPU::getE);
        instructions[0x5C] = new TestBit(3, CPU::getH);
        instructions[0x5D] = new TestBit(3, CPU::getL);
        instructions[0x5E] = new TestBit(3, cpu -> cpu.readByte(cpu.getHL()));
        instructions[0x5F] = new TestBit(3, CPU::getA);
        instructions[0x60] = new TestBit(4, CPU::getB);
        instructions[0x61] = new TestBit(4, CPU::getC);
        instructions[0x62] = new TestBit(4, CPU::getD);
        instructions[0x63] = new TestBit(4, CPU::getE);
        instructions[0x64] = new TestBit(4, CPU::getH);
        instructions[0x65] = new TestBit(4, CPU::getL);
        instructions[0x66] = new TestBit(4, cpu -> cpu.readByte(cpu.getHL()));
        instructions[0x67] = new TestBit(4, CPU::getA);
        instructions[0x68] = new TestBit(5, CPU::getB);
        instructions[0x69] = new TestBit(5, CPU::getC);
        instructions[0x6A] = new TestBit(5, CPU::getD);
        instructions[0x6B] = new TestBit(5, CPU::getE);
        instructions[0x6C] = new TestBit(5, CPU::getH);
        instructions[0x6D] = new TestBit(5, CPU::getL);
        instructions[0x6E] = new TestBit(5, cpu -> cpu.readByte(cpu.getHL()));
        instructions[0x6F] = new TestBit(5, CPU::getA);
        instructions[0x70] = new TestBit(6, CPU::getB);
        instructions[0x71] = new TestBit(6, CPU::getC);
        instructions[0x72] = new TestBit(6, CPU::getD);
        instructions[0x73] = new TestBit(6, CPU::getE);
        instructions[0x74] = new TestBit(6, CPU::getH);
        instructions[0x75] = new TestBit(6, CPU::getL);
        instructions[0x76] = new TestBit(6, cpu -> cpu.readByte(cpu.getHL()));
        instructions[0x77] = new TestBit(6, CPU::getA);
        instructions[0x78] = new TestBit(7, CPU::getB);
        instructions[0x79] = new TestBit(7, CPU::getC);
        instructions[0x7A] = new TestBit(7, CPU::getD);
        instructions[0x7B] = new TestBit(7, CPU::getE);
        instructions[0x7C] = new TestBit(7, CPU::getH);
        instructions[0x7D] = new TestBit(7, CPU::getL);
        instructions[0x7E] = new TestBit(7, cpu -> cpu.readByte(cpu.getHL()));
        instructions[0x7F] = new TestBit(7, CPU::getA);
        instructions[0x80] = cpu -> cpu.setB((byte) (cpu.getB() & 0b11111110));
        instructions[0x81] = cpu -> cpu.setC((byte) (cpu.getC() & 0b11111110));
        instructions[0x82] = cpu -> cpu.setD((byte) (cpu.getD() & 0b11111110));
        instructions[0x83] = cpu -> cpu.setE((byte) (cpu.getE() & 0b11111110));
        instructions[0x84] = cpu -> cpu.setH((byte) (cpu.getH() & 0b11111110));
        instructions[0x85] = cpu -> cpu.setL((byte) (cpu.getL() & 0b11111110));
        instructions[0x86] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) & 0b11111110));
        instructions[0x87] = cpu -> cpu.setA((byte) (cpu.getA() & 0b11111101));
        instructions[0x88] = cpu -> cpu.setB((byte) (cpu.getB() & 0b11111101));
        instructions[0x89] = cpu -> cpu.setC((byte) (cpu.getC() & 0b11111101));
        instructions[0x8A] = cpu -> cpu.setD((byte) (cpu.getD() & 0b11111101));
        instructions[0x8B] = cpu -> cpu.setE((byte) (cpu.getE() & 0b11111101));
        instructions[0x8C] = cpu -> cpu.setH((byte) (cpu.getH() & 0b11111101));
        instructions[0x8D] = cpu -> cpu.setL((byte) (cpu.getL() & 0b11111101));
        instructions[0x8E] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) & 0b11111101));
        instructions[0x8F] = cpu -> cpu.setA((byte) (cpu.getA() & 0b11111101));
        instructions[0x90] = cpu -> cpu.setB((byte) (cpu.getB() & 0b11111011));
        instructions[0x91] = cpu -> cpu.setC((byte) (cpu.getC() & 0b11111011));
        instructions[0x92] = cpu -> cpu.setD((byte) (cpu.getD() & 0b11111011));
        instructions[0x93] = cpu -> cpu.setE((byte) (cpu.getE() & 0b11111011));
        instructions[0x94] = cpu -> cpu.setH((byte) (cpu.getH() & 0b11111011));
        instructions[0x95] = cpu -> cpu.setL((byte) (cpu.getL() & 0b11111011));
        instructions[0x96] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) & 0b11111011));
        instructions[0x97] = cpu -> cpu.setA((byte) (cpu.getA() & 0b11111011));
        instructions[0x98] = cpu -> cpu.setB((byte) (cpu.getB() & 0b11110111));
        instructions[0x99] = cpu -> cpu.setC((byte) (cpu.getC() & 0b11110111));
        instructions[0x9A] = cpu -> cpu.setD((byte) (cpu.getD() & 0b11110111));
        instructions[0x9B] = cpu -> cpu.setE((byte) (cpu.getE() & 0b11110111));
        instructions[0x9C] = cpu -> cpu.setH((byte) (cpu.getH() & 0b11110111));
        instructions[0x9D] = cpu -> cpu.setL((byte) (cpu.getL() & 0b11110111));
        instructions[0x9E] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) & 0b11110111));
        instructions[0x9F] = cpu -> cpu.setA((byte) (cpu.getA() & 0b11110111));
        instructions[0xA0] = cpu -> cpu.setB((byte) (cpu.getB() & 0b11101111));
        instructions[0xA1] = cpu -> cpu.setC((byte) (cpu.getC() & 0b11101111));
        instructions[0xA2] = cpu -> cpu.setD((byte) (cpu.getD() & 0b11101111));
        instructions[0xA3] = cpu -> cpu.setE((byte) (cpu.getE() & 0b11101111));
        instructions[0xA4] = cpu -> cpu.setH((byte) (cpu.getH() & 0b11101111));
        instructions[0xA5] = cpu -> cpu.setL((byte) (cpu.getL() & 0b11101111));
        instructions[0xA6] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) & 0b11101111));
        instructions[0xA7] = cpu -> cpu.setA((byte) (cpu.getA() & 0b11101111));
        instructions[0xA8] = cpu -> cpu.setB((byte) (cpu.getB() & 0b11011111));
        instructions[0xA9] = cpu -> cpu.setC((byte) (cpu.getC() & 0b11011111));
        instructions[0xAA] = cpu -> cpu.setD((byte) (cpu.getD() & 0b11011111));
        instructions[0xAB] = cpu -> cpu.setE((byte) (cpu.getE() & 0b11011111));
        instructions[0xAC] = cpu -> cpu.setH((byte) (cpu.getH() & 0b11011111));
        instructions[0xAD] = cpu -> cpu.setL((byte) (cpu.getL() & 0b11011111));
        instructions[0xAE] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) & 0b11011111));
        instructions[0xAF] = cpu -> cpu.setA((byte) (cpu.getA() & 0b11011111));
        instructions[0xB0] = cpu -> cpu.setB((byte) (cpu.getB() & 0b10111111));
        instructions[0xB1] = cpu -> cpu.setC((byte) (cpu.getC() & 0b10111111));
        instructions[0xB2] = cpu -> cpu.setD((byte) (cpu.getD() & 0b10111111));
        instructions[0xB3] = cpu -> cpu.setE((byte) (cpu.getE() & 0b10111111));
        instructions[0xB4] = cpu -> cpu.setH((byte) (cpu.getH() & 0b10111111));
        instructions[0xB5] = cpu -> cpu.setL((byte) (cpu.getL() & 0b10111111));
        instructions[0xB6] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) & 0b10111111));
        instructions[0xB7] = cpu -> cpu.setA((byte) (cpu.getA() & 0b10111111));
        instructions[0xB8] = cpu -> cpu.setB((byte) (cpu.getB() & 0b01111111));
        instructions[0xB9] = cpu -> cpu.setC((byte) (cpu.getC() & 0b01111111));
        instructions[0xBA] = cpu -> cpu.setD((byte) (cpu.getD() & 0b01111111));
        instructions[0xBB] = cpu -> cpu.setE((byte) (cpu.getE() & 0b01111111));
        instructions[0xBC] = cpu -> cpu.setH((byte) (cpu.getH() & 0b01111111));
        instructions[0xBD] = cpu -> cpu.setL((byte) (cpu.getL() & 0b01111111));
        instructions[0xBE] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) & 0b01111111));
        instructions[0xBF] = cpu -> cpu.setA((byte) (cpu.getA() & 0b01111111));
        instructions[0xC0] = cpu -> cpu.setB((byte) (cpu.getB() | 0b00000001));
        instructions[0xC1] = cpu -> cpu.setC((byte) (cpu.getC() | 0b00000001));
        instructions[0xC2] = cpu -> cpu.setD((byte) (cpu.getD() | 0b00000001));
        instructions[0xC3] = cpu -> cpu.setE((byte) (cpu.getE() | 0b00000001));
        instructions[0xC4] = cpu -> cpu.setH((byte) (cpu.getH() | 0b00000001));
        instructions[0xC5] = cpu -> cpu.setL((byte) (cpu.getL() | 0b00000001));
        instructions[0xC6] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) | 0b00000001));
        instructions[0xC7] = cpu -> cpu.setA((byte) (cpu.getA() | 0b00000010));
        instructions[0xC8] = cpu -> cpu.setB((byte) (cpu.getB() | 0b00000010));
        instructions[0xC9] = cpu -> cpu.setC((byte) (cpu.getC() | 0b00000010));
        instructions[0xCA] = cpu -> cpu.setD((byte) (cpu.getD() | 0b00000010));
        instructions[0xCB] = cpu -> cpu.setE((byte) (cpu.getE() | 0b00000010));
        instructions[0xCC] = cpu -> cpu.setH((byte) (cpu.getH() | 0b00000010));
        instructions[0xCD] = cpu -> cpu.setL((byte) (cpu.getL() | 0b00000010));
        instructions[0xCE] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) | 0b00000010));
        instructions[0xCF] = cpu -> cpu.setA((byte) (cpu.getA() | 0b00000010));
        instructions[0xD0] = cpu -> cpu.setB((byte) (cpu.getB() | 0b00000100));
        instructions[0xD1] = cpu -> cpu.setC((byte) (cpu.getC() | 0b00000100));
        instructions[0xD2] = cpu -> cpu.setD((byte) (cpu.getD() | 0b00000100));
        instructions[0xD3] = cpu -> cpu.setE((byte) (cpu.getE() | 0b00000100));
        instructions[0xD4] = cpu -> cpu.setH((byte) (cpu.getH() | 0b00000100));
        instructions[0xD5] = cpu -> cpu.setL((byte) (cpu.getL() | 0b00000100));
        instructions[0xD6] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) | 0b00000100));
        instructions[0xD7] = cpu -> cpu.setA((byte) (cpu.getA() | 0b00000100));
        instructions[0xD8] = cpu -> cpu.setB((byte) (cpu.getB() | 0b00001000));
        instructions[0xD9] = cpu -> cpu.setC((byte) (cpu.getC() | 0b00001000));
        instructions[0xDA] = cpu -> cpu.setD((byte) (cpu.getD() | 0b00001000));
        instructions[0xDB] = cpu -> cpu.setE((byte) (cpu.getE() | 0b00001000));
        instructions[0xDC] = cpu -> cpu.setH((byte) (cpu.getH() | 0b00001000));
        instructions[0xDD] = cpu -> cpu.setL((byte) (cpu.getL() | 0b00001000));
        instructions[0xDE] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) | 0b00001000));
        instructions[0xDF] = cpu -> cpu.setA((byte) (cpu.getA() | 0b00001000));
        instructions[0xE0] = cpu -> cpu.setB((byte) (cpu.getB() | 0b00010000));
        instructions[0xE1] = cpu -> cpu.setC((byte) (cpu.getC() | 0b00010000));
        instructions[0xE2] = cpu -> cpu.setD((byte) (cpu.getD() | 0b00010000));
        instructions[0xE3] = cpu -> cpu.setE((byte) (cpu.getE() | 0b00010000));
        instructions[0xE4] = cpu -> cpu.setH((byte) (cpu.getH() | 0b00010000));
        instructions[0xE5] = cpu -> cpu.setL((byte) (cpu.getL() | 0b00010000));
        instructions[0xE6] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) | 0b00010000));
        instructions[0xE7] = cpu -> cpu.setA((byte) (cpu.getA() | 0b00010000));
        instructions[0xE8] = cpu -> cpu.setB((byte) (cpu.getB() | 0b00100000));
        instructions[0xE9] = cpu -> cpu.setC((byte) (cpu.getC() | 0b00100000));
        instructions[0xEA] = cpu -> cpu.setD((byte) (cpu.getD() | 0b00100000));
        instructions[0xEB] = cpu -> cpu.setE((byte) (cpu.getE() | 0b00100000));
        instructions[0xEC] = cpu -> cpu.setH((byte) (cpu.getH() | 0b00100000));
        instructions[0xED] = cpu -> cpu.setL((byte) (cpu.getL() | 0b00100000));
        instructions[0xEE] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) | 0b00100000));
        instructions[0xEF] = cpu -> cpu.setA((byte) (cpu.getA() | 0b00100000));
        instructions[0xF0] = cpu -> cpu.setB((byte) (cpu.getB() | 0b01000000));
        instructions[0xF1] = cpu -> cpu.setC((byte) (cpu.getC() | 0b01000000));
        instructions[0xF2] = cpu -> cpu.setD((byte) (cpu.getD() | 0b01000000));
        instructions[0xF3] = cpu -> cpu.setE((byte) (cpu.getE() | 0b01000000));
        instructions[0xF4] = cpu -> cpu.setH((byte) (cpu.getH() | 0b01000000));
        instructions[0xF5] = cpu -> cpu.setL((byte) (cpu.getL() | 0b10111111));
        instructions[0xF6] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) | 0b01000000));
        instructions[0xF7] = cpu -> cpu.setA((byte) (cpu.getA() | 0b01000000));
        instructions[0xF8] = cpu -> cpu.setB((byte) (cpu.getB() | 0b10000000));
        instructions[0xF9] = cpu -> cpu.setC((byte) (cpu.getC() | 0b10000000));
        instructions[0xFA] = cpu -> cpu.setD((byte) (cpu.getD() | 0b10000000));
        instructions[0xFB] = cpu -> cpu.setE((byte) (cpu.getE() | 0b10000000));
        instructions[0xFC] = cpu -> cpu.setH((byte) (cpu.getH() | 0b10000000));
        instructions[0xFD] = cpu -> cpu.setL((byte) (cpu.getL() | 0b10000000));
        instructions[0xFE] = cpu -> cpu.writeByte(cpu.getHL(), (byte) (cpu.readByte(cpu.getHL()) | 0b10000000));
        instructions[0xFF] = cpu -> cpu.setA((byte) (cpu.getA() | 0b10000000));
    }

    public static byte next(CPU cpu) {
        byte b = cpu.nextByte();
        Instruction instruction = instructions[b & 0xFF];
        if (instruction != nop) {
//            log.info("Executing CB instruction: {} using {}", String.format("%02X", b), instruction);
            instruction.accept(cpu);
        } else {
            System.out.printf("%02X%n", b);
        }
        return b;
    }

}
